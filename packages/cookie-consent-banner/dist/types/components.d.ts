/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { CategoryItem, CookieAttributes } from "./components/cookie-consent-banner/types";
export { CategoryItem, CookieAttributes } from "./components/cookie-consent-banner/types";
export namespace Components {
    interface CookieConsentBanner {
        "availableCategories": CategoryItem[];
        "btnLabelAcceptAndContinue": string;
        "btnLabelOnlyEssentialAndContinue": string;
        "btnLabelPersistSelectionAndContinue": string;
        "btnLabelSelectAllAndContinue": string;
        "contentSettingsDescription": string;
        "cookieAttributes": CookieAttributes;
        "cookieName": string;
        "disableResetSiteCookiesOnConsentWithdrawn": boolean;
        "disableSlideInAnimation": boolean;
        "handlePreferencesRestored": ({
    acceptedCategories,
  }: {
    acceptedCategories: string[];
  }) => void;
        "handlePreferencesUpdated": ({
    acceptedCategories,
  }: {
    acceptedCategories: string[];
  }) => void;
        "headline": string;
    }
}
export interface CookieConsentBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCookieConsentBannerElement;
}
declare global {
    interface HTMLCookieConsentBannerElementEventMap {
        "cookie_consent_preferences_restored": any;
        "cookie_consent_preferences_updated": any;
    }
    interface HTMLCookieConsentBannerElement extends Components.CookieConsentBanner, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCookieConsentBannerElementEventMap>(type: K, listener: (this: HTMLCookieConsentBannerElement, ev: CookieConsentBannerCustomEvent<HTMLCookieConsentBannerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCookieConsentBannerElementEventMap>(type: K, listener: (this: HTMLCookieConsentBannerElement, ev: CookieConsentBannerCustomEvent<HTMLCookieConsentBannerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCookieConsentBannerElement: {
        prototype: HTMLCookieConsentBannerElement;
        new (): HTMLCookieConsentBannerElement;
    };
    interface HTMLElementTagNameMap {
        "cookie-consent-banner": HTMLCookieConsentBannerElement;
    }
}
declare namespace LocalJSX {
    interface CookieConsentBanner {
        "availableCategories"?: CategoryItem[];
        "btnLabelAcceptAndContinue"?: string;
        "btnLabelOnlyEssentialAndContinue"?: string;
        "btnLabelPersistSelectionAndContinue"?: string;
        "btnLabelSelectAllAndContinue"?: string;
        "contentSettingsDescription"?: string;
        "cookieAttributes"?: CookieAttributes;
        "cookieName"?: string;
        "disableResetSiteCookiesOnConsentWithdrawn"?: boolean;
        "disableSlideInAnimation"?: boolean;
        "handlePreferencesRestored"?: ({
    acceptedCategories,
  }: {
    acceptedCategories: string[];
  }) => void;
        "handlePreferencesUpdated"?: ({
    acceptedCategories,
  }: {
    acceptedCategories: string[];
  }) => void;
        "headline"?: string;
        "onCookie_consent_preferences_restored"?: (event: CookieConsentBannerCustomEvent<any>) => void;
        "onCookie_consent_preferences_updated"?: (event: CookieConsentBannerCustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "cookie-consent-banner": CookieConsentBanner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cookie-consent-banner": LocalJSX.CookieConsentBanner & JSXBase.HTMLAttributes<HTMLCookieConsentBannerElement>;
        }
    }
}
