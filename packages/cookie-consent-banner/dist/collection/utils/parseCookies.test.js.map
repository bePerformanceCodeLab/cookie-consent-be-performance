{"version":3,"file":"parseCookies.test.js","sourceRoot":"","sources":["../../src/utils/parseCookies.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { parseCookies, CookieMap } from \"./parseCookies\";\n\nconst mockDocumentCookie = (cookieString: string): Document =>\n  Object.defineProperty(window.document, \"cookie\", {\n    writable: true,\n    value: cookieString,\n  });\n\ndescribe(\"parseCookies\", () => {\n  it(\"should work with one cookie\", () => {\n    const cookieStringSingle = \"first=someValue\";\n    const expectedParsed: CookieMap = {\n      first: \"someValue\",\n    };\n\n    mockDocumentCookie(cookieStringSingle);\n\n    expect(parseCookies()).toMatchObject(expectedParsed);\n  });\n\n  it(\"should work with multiple cookies\", () => {\n    const cookieStringSingle =\n      \"first=someValue;second=someValue;third=someValue\";\n    const expectedParsed: CookieMap = {\n      first: \"someValue\",\n      second: \"someValue\",\n      third: \"someValue\",\n    };\n\n    mockDocumentCookie(cookieStringSingle);\n\n    expect(parseCookies()).toMatchObject(expectedParsed);\n  });\n\n  it(\"should trim leading spaces\", () => {\n    const cookieStringWithLeadingSpaces = \"first=someValue; second=someValue\";\n    const expectedParsed: CookieMap = {\n      first: \"someValue\",\n      second: \"someValue\",\n    };\n\n    mockDocumentCookie(cookieStringWithLeadingSpaces);\n\n    expect(parseCookies()).toMatchObject(expectedParsed);\n  });\n\n  it(\"should trim trailing spaces\", () => {\n    const cookieStringWithTrailingSpaces = \"first=someValue ;second=someValue\";\n    const expectedParsed: CookieMap = {\n      first: \"someValue\",\n      second: \"someValue\",\n    };\n\n    mockDocumentCookie(cookieStringWithTrailingSpaces);\n\n    expect(parseCookies()).toMatchObject(expectedParsed);\n  });\n\n  it(\"should trim leading and trailing spaces\", () => {\n    const cookieStringLeadingAndTrailingSpaces =\n      \" first=someValue ;second=someValue\";\n    const expectedParsed: CookieMap = {\n      first: \"someValue\",\n      second: \"someValue\",\n    };\n\n    mockDocumentCookie(cookieStringLeadingAndTrailingSpaces);\n\n    expect(parseCookies()).toMatchObject(expectedParsed);\n  });\n\n  it(\"should trim leading tabs\", () => {\n    const cookieStringWithLeadingTabs = \"\\tfirst=someValue;second=someValue\";\n    const expectedParsed: CookieMap = {\n      first: \"someValue\",\n      second: \"someValue\",\n    };\n\n    mockDocumentCookie(cookieStringWithLeadingTabs);\n\n    expect(parseCookies()).toMatchObject(expectedParsed);\n  });\n\n  it(\"should trim trailing tabs\", () => {\n    const cookieStringWithTrailingTabs = \"first=someValue\\t;second=someValue\";\n    const expectedParsed: CookieMap = {\n      first: \"someValue\",\n      second: \"someValue\",\n    };\n\n    mockDocumentCookie(cookieStringWithTrailingTabs);\n\n    expect(parseCookies()).toMatchObject(expectedParsed);\n  });\n\n  it(\"should trim leading and trailing tabs\", () => {\n    const cookieStringLeadingAndTrailingTabs =\n      \"\\tfirst=someValue\\t;second=someValue\";\n    const expectedParsed: CookieMap = {\n      first: \"someValue\",\n      second: \"someValue\",\n    };\n\n    mockDocumentCookie(cookieStringLeadingAndTrailingTabs);\n\n    expect(parseCookies()).toMatchObject(expectedParsed);\n  });\n});\n"]}