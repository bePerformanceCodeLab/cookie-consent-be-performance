{"version":3,"file":"safeCookie.test.js","sourceRoot":"","sources":["../../src/utils/safeCookie.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { stringifyCookie } from \"./safeCookie\";\n\ndescribe(\"stringifyCookie\", () => {\n  it(\"should return a string with the correct name and value\", () => {\n    const name = \"test\";\n    const value = \"123\";\n    const result = stringifyCookie(name, value);\n    expect(result).toContain(\n      `${encodeURIComponent(name)}=${encodeURIComponent(value)}`,\n    );\n  });\n\n  it(\"should handle special characters in the value\", () => {\n    const name = \"test\";\n    const value = \"abc%def\";\n    const result = stringifyCookie(name, value);\n    expect(result).toContain(\n      `${encodeURIComponent(name)}=${encodeURIComponent(value)}`,\n    );\n  });\n\n  it(\"should include the expires attribute if provided as a number (number of days)\", () => {\n    const MILLISECONDS_IN_DAY = 86400000;\n    const name = \"test\";\n    const value = \"123\";\n    const expires = 1;\n    const result = stringifyCookie(name, value, { expires });\n    const expectedDate = new Date(\n      Date.now() + expires * MILLISECONDS_IN_DAY,\n    ).toUTCString();\n    expect(result).toContain(`expires=${expectedDate}`);\n  });\n\n  it(\"should include the expires attribute if provided as a Date object\", () => {\n    const name = \"test\";\n    const value = \"123\";\n    const expires = new Date(\"2024-01-01\");\n    const result = stringifyCookie(name, value, { expires });\n    expect(result).toContain(`expires=${expires.toUTCString()}`);\n  });\n\n  it(\"should include other attributes if provided\", () => {\n    const name = \"test\";\n    const value = \"123\";\n    const path = \"/test\";\n    const domain = \"example.com\";\n    const secure = true;\n    const sameSite = \"strict\";\n    const result = stringifyCookie(name, value, {\n      path,\n      domain,\n      secure,\n      sameSite,\n    });\n    expect(result).toContain(`path=${path}`);\n    expect(result).toContain(`domain=${domain}`);\n    expect(result).toContain(\"secure\");\n    expect(result).toContain(`sameSite=${sameSite}`);\n  });\n});\n"]}