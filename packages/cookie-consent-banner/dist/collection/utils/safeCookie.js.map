{"version":3,"file":"safeCookie.js","sourceRoot":"","sources":["../../src/utils/safeCookie.ts"],"names":[],"mappings":"AAEA,MAAM,SAAS,GAAG,CAAI,QAAuB,EAAiB,EAAE,CAC9D,QAAQ,KAAK,SAAS,CAAC;AAEzB,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,IAAY,EACZ,KAAa,EACb,UAA6B,EACrB,EAAE;IACV,MAAM,gBAAgB,GAAqB,UAAU,IAAI,EAAE,CAAC;IAC5D,MAAM,YAAY,GAAG,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,kBAAkB,CACpE,KAAK,CACN,CAAC,OAAO,CAAC,0CAA0C,EAAE,kBAAkB,CAAC,EAAE,CAAC;IAE5E,MAAM,gBAAgB,GAAG,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC;SACtD,MAAM,CAAC,SAAS,CAAC;SACjB,GAAG,CAAC,CAAC,CAAC,YAAY,EAAE,cAAc,CAAC,EAAE,EAAE;QACtC,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YAC/B,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE,CAAC;gBACvC,MAAM,mBAAmB,GAAG,QAAQ,CAAC;gBACrC,MAAM,aAAa,GAAG,IAAI,IAAI,CAC5B,IAAI,CAAC,GAAG,EAAE,GAAG,cAAc,GAAG,mBAAmB,CAClD,CAAC;gBACF,OAAO,GAAG,YAAY,IAAI,aAAa,CAAC,WAAW,EAAE,EAAE,CAAC;YAC1D,CAAC;YACD,OAAO,GAAG,YAAY,IAAK,cAAuB,CAAC,WAAW,EAAE,EAAE,CAAC;QACrE,CAAC;QACD,IAAI,YAAY,KAAK,QAAQ,EAAE,CAAC;YAC9B,OAAO,YAAY,CAAC;QACtB,CAAC;QAED,OAAO,GAAG,YAAY,IAAI,cAAiC,EAAE,CAAC;IAChE,CAAC,CAAC;SACD,IAAI,CAAC,IAAI,CAAC,CAAC;IAEd,OAAO,GAAG,YAAY,KAAK,gBAAgB,EAAE,CAAC;AAChD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAqB;IACvD,IAAI,EAAE,GAAG;IACT,OAAO,EAAE,CAAC;IACV,MAAM,EAAE,QAAQ,CAAC,QAAQ,CAAC,QAAQ;CACnC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,GAAG,KAAyC,EACtC,EAAE;IACR,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,UAAU,CAAC,GAAG,KAAK,CAAC;IACxC,QAAQ,CAAC,MAAM,GAAG,eAAe,CAAC,IAAI,EAAE,KAAK,EAAE;QAC7C,GAAG,uBAAuB;QAC1B,GAAG,UAAU;KACd,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import type { CookieAttributes } from \"../components/cookie-consent-banner/types\";\n\nconst isDefined = <T>(argument: T | undefined): argument is T =>\n  argument !== undefined;\n\nexport const stringifyCookie = (\n  name: string,\n  value: string,\n  attributes?: CookieAttributes,\n): string => {\n  const cookieAttributes: CookieAttributes = attributes ?? {};\n  const cookieString = `${encodeURIComponent(name)}=${encodeURIComponent(\n    value,\n  ).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g, decodeURIComponent)}`;\n\n  const attributesString = Object.entries(cookieAttributes)\n    .filter(isDefined)\n    .map(([attributeKey, attributeValue]) => {\n      if (attributeKey === \"expires\") {\n        if (typeof attributeValue === \"number\") {\n          const MILLISECONDS_IN_DAY = 86400000;\n          const expiresAsDate = new Date(\n            Date.now() + attributeValue * MILLISECONDS_IN_DAY,\n          );\n          return `${attributeKey}=${expiresAsDate.toUTCString()}`;\n        }\n        return `${attributeKey}=${(attributeValue as Date).toUTCString()}`;\n      }\n      if (attributeKey === \"secure\") {\n        return attributeKey;\n      }\n\n      return `${attributeKey}=${attributeValue as string | number}`;\n    })\n    .join(\"; \");\n\n  return `${cookieString}; ${attributesString}`;\n};\n\nexport const defaultCookieAttributes: CookieAttributes = {\n  path: \"/\",\n  expires: 7,\n  domain: document.location.hostname,\n};\n\nexport const safeCookie = (\n  ...attrs: Parameters<typeof stringifyCookie>\n): void => {\n  const [name, value, attributes] = attrs;\n  document.cookie = stringifyCookie(name, value, {\n    ...defaultCookieAttributes,\n    ...attributes,\n  });\n};\n"]}